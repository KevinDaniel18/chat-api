// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  name              String
  email             String     @unique
  password          String
  profilePicture    String?
  notificationToken String?
  likes             Int        @default(0)
  createdAt         DateTime   @default(now())
  sentMessages      Message[]  @relation("SentMessages")
  receivedMessages  Message[]  @relation("ReceivedMessages")
  likesGiven        UserLike[] @relation("LikesGiven")
  likesReceived     UserLike[] @relation("LikesReceived")
}

model UserLike {
  id        Int      @id @default(autoincrement())
  likerId   Int // ID del usuario que da el "me gusta"
  liker     User     @relation("LikesGiven", fields: [likerId], references: [id], onDelete: Cascade)
  likedId   Int // ID del usuario que recibe el "me gusta"
  liked     User     @relation("LikesReceived", fields: [likedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Message {
  id                Int      @id @default(autoincrement())
  content           String?
  senderId          Int
  sender            User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId        Int
  receiver          User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt         DateTime @default(now())
  isPending         Boolean  @default(true)
  isInteracted      Boolean  @default(false)
  deletedForUserIds Int[]    @default([])
  fileUrls          String[] @default([])
}
